

template< int DataTypeId >
class BaseBoolAttr
{
};

template< int DataTypeId >
class BaseStringAttr
{
};

template< int DataTypeId >
class BaseIntAttr
{
};

template< int DataTypeId >
class BaseDateTimeAttr
{
};



class DataBuffer
{
public:
	typedef unsigned char* DataType;
	DataBuffer(): m_size(0), m_data(nullptr){}
	DataBuffer(size_t size): m_size(size), m_data(new (*DataType)[size]){}
	//DataBuffer(size_t size, const DataType buffer) : m_size(size), 
	DataBuffer (DataBuffer && ref): m_size(ref.size), m_data(ref.m_data){ ref.m_data=nullptr;}
	
	bool isEmpty()const;
private:	
	DataBuffer(const DataBuffer&);

	size_t m_size;
	DataType m_data;
};


template<int DataTypeId>
AttrData<DataTypeId> getAttr()
{
	AttrIndexType index = AttrData<DataTypeId>::attr_index;
	static_assert(index!=AttrIndexType(-1));
	AttrIndexType innerIndex = getInnerIndex(index);
	if(index == AttrIndexType(-1))
	{
		auto guard = boost::make_lock_guard(m_mutex);
		m_databuffer.push_back(DataBuffer());
		index = m_databuffer.size()-1;
	}
	return AttrData<DataTypeId>(index);
}

template<int DataTypeId>
String getAttrName()
{
	return AttrData<DataTypeId>::name;
}






