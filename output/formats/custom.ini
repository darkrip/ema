;[TypeName]
;Parameter = Value of parameter
;Pattern = String representing a pattern
;Command = String representing a command
;Flag = 0 or 1 depending on state of this flag

;TypeName is a short name for archive type. It is required and must be unique.
;Example:
;	[ARJ] 

;Parameters
;	Archiver Path to archiver utilit. Pach can contain enviropment variable such as %WINDIR% or %COMMANDER_PATH%.
;	ID (optional) archive ID (2-digit hex numbers delimited with spaces). 

;	IDPos (optional) ID position in archive. If not present, ID will be searched 
;	in starting part of archive. You can define the positions with "-" sign. In this case 
;	the positill be calculated from end of file. Special value <SeekID> determinated 
;	search ID if not found by numeric values of IDPos. Seek in range 0 - (Smalest of Size of file or IDSeekRange). Values can be writed as decimal (12345) or heximal (03039). For negative values use notation 0xFFFFFFFF (-1).

;	IDSeekRange (optional) count of bytes where ID seek if defined <SeekID>. By default IDSeekRange = 1Mb. See _BOLD(IDPOS). 

;	ExcludeIDs (optional) Signatures if found in file, file defined as the "process imposible".
;	This opportunity entered for correct process files, generated  InnoSetup, NSIS (NullSoft Instalation System) or other.
;	Algoritm of working of parameter:
;	If fount ID from _BOLD(ID), then check ExcludeIDs.
;	if found any exclude ID, then file not support by _BOLD(Archiver). 

;Param format: (Signature, [offset], [Absolute]),(Signature, [offset], [Absolute]), .... (Signature, [offset], [Absolute]). 
;	Where:
;	Signature -- sequence of byte for find. 
;	Absolute -- (optional) Absolute (1) or relative (0) offset. By default = 0.  
;	If 1, then offset start from begin fiel (if Offset >= 0), or end of file (if Offset <0).
;	If 0, then offset start from relative founded ID. See also description of param Offset.
;	Offset -- (optional) Offset relatively current ID (if = 0, see from begin of ID, if >0 then on offset byte forward (to end of file) from begin signature (ID), if <0 then on offset byte backwards (to begin of file) from begin signature. By default = 0. See also description of Absolute.

;	Example for ExcludeIDs.
;		ID= 01 02 03 04, 01 03 02
;		IDPOS = 5
;		ExcludeIDs= (00, -1), (01 02 03 04 05,0), (06,5), (07,11, 1), (08,-1, 1)

; ExplorerMultiArc will define{determine} that the file can to be processed if has coincided though one signature from ID, and signatures from ExcludeIDs have not coincided.
; In this example will files which are accepted comprise sequence of byte (xx in the given example any byte):

;	0  1  2  3  4  5  6  7  8  
;	xx xx xx xx xx 01 02 03 04
;	xx xx xx xx xx 01 03 02 xx

;	but files which are rejected contain

;	0  1  2  3  4  5  6  7  8  9  10 11 12 13 
;
;	xx xx xx xx 00 01 02 03 04 xx xx xx xx xx      rule {00, -1}
;	x xx xx xx 00 01 03 02 xx xx xx xx xx xx

;	xx xx xx xx xx 01 02 03 04 05 xx xx xx xx      rule {01 02 03 04 05,0}

;	xx xx xx xx xx 01 02 03 04 xx xx xx xx 06      rule {06,5}
;	xx xx xx xx xx 01 03 02 xx xx xx xx 06 xx  
;	xx xx xx xx xx 01 02 03 04 xx xx 07 xx xx      rule {07,11, 1}
;	xx xx xx xx xx 01 03 02 xx xx xx 07 xx xx

;	0  1  2  3  4  5  6  7  8                 EOF 
;	xx xx xx xx xx 01 02 03 04 .............. 08   rule {08,-1, 1}
;	xx xx xx xx xx 01 03 02 xx .............. 08

;	Extension archive format extension (without dot). 
;		Note:All above parameters can be defined with multiple values. You can use comma to separate those 
;		multiple values. 
;	Description archive description. A short string - version, author etc.
;	Example:
;		ID = 00 FF, CC DD, 55 EF 32 12,
;		IDPos = 0, 0xd, -6, <SeekID>


;	Extension = hhh, hpj, tzu
;	Description="PivkARC v7.1365 (c) by Kon' Petrovich"
;	The archives in this example will be checked in the following manner. 
	;Set to pos 0 and check for every ID defined in ID parameter. Than go to pos 13 and check for all IDs again and try will be at pos 6 before the end of file and last try find IDs in range 0--SizeOfFile or 0--IDSeekRange, or 0--1Mb. If at some of this checks the file will contains some of ID this file will be assumed as supported by this archiver. 

;Patterns
;	Start(optional) any part of line in listing after which processing 
;	End (optional) any part of line in listing to stop processing of files list.
;	Note for Start and End patterns: If text started from '^', it will be compared from second symbol with lines beginning. Otherwise text looked anywhere in lines.
;	Format0 ... Format<n> - files listing format. If file description in archive listing contains multiple lines use corresponding format keys count. You can define up to 50 format lines.
;	Example:
;	Start="^-------"
;	End="^Total files listed: "
;	Format1="zzzzzzzzzz aaaaa                        yyyy tt dd hh mm ss"
;	Format2=" "

;Commands:
;	IsArchive - check this file is archive command
;	List - produce listing.
;	Extract - extract file from archive.
;	ExtractWithPath - extract file(s) from archive with full path.
;		Note for extract commands: If BatchUnpack flag is set to 1 the second one will be used.
;	Test - test archive.
;	Delete - delete file from archive.
;	Add - add file to archive.
;	Move - move file to archive.
;	InputString - insert some string into archivers utility input stream. This is used to emulate pressing some keys at start of archiver. Used for some shareware utilities that requires press Y before work. =-)
;		Note: All command use command definition format

;Flags
;	IgnoreErrors if active - archiver commands exit code will be ignored. Use with caution.
;	SkipEmpty files with empty names will not be added to list
;	SkipDirsInFileList do not add directory entries in file-list
;	SearchForUglyDirs try this when your archiver produce listings where directory entries doesn't have trailing '\'5c'-shes. this option force MultiArc to search for this ugly dirs and correct list to make it understandable for Commander. Do not use this key if you not REALLY NEED it - it may slow down performance of operating ...
;	BatchUnpack if activate MultiArc will not unpack all files singly one by one as Commander want. Instead it will unpack this files at "archive closing phase" in one list by ONE call of archiver utility. This option is VERY useful for "solid" archives ... But ... there are some visual confusions using this mode - unpacking progress will show 
;		not real percentage ... See also _JUMP_S(Known bugs, IDC_HLP_PROBLEMS) for more info on BatchUnpack problems.
;	UnixPath if paths in output list in Unix format - activate this
;	Debug if this flag activated - all archiving utility output will be written to log file, laying in same directory as multiarc and named "multiarc.%TYPENAME%.log" 
;		where %TYPENAME% is TypeName of corresponding archiver description. If some list files used in commands, those files also will be not removed after performing command. Look into %TEMP%/$mltwcx directory for those files. Activate this flag only if you going to track all activity. It is needed during writing new addons. Do not use it if you not need it! This log file can eat your free disk space very quick! =-) You warned.
;	Encoding Archiver output encoding(unicode is supported)
;	Promt0 ... Promt<n>=[-d[-e][-w]] "Text" 
;		Ask user additional information, 	   -d - ask only when this variable is used
;											   -e - dont remember this string for file, ask for every usage
;											   -w - use hidden user input(stars instead symbols)
;	LandFile - lang file name, see land format
 
;Format parsing
;	To parse file listing MultiArc uses FormatN-pattern. If file list uses some strings to 
;	output information about every file in the archive use corresponding count of Format-patterns. The 
;	Format-pattern is a string defining mask for extraction information from single strings of files list. 
;	It uses following symbols to define pattern: 
;	n - file name
;	. - remove trailing spaces from file name and append name with dot
;	z - unpacked size
;	c - file description
;	p - packed size
;	d - day
;	t - month
;	TTT - three letters month name (Jan, Feb, Mar, ...)
;	y - year
;	h - hours
;	H - hours modifier letter (a - a.m. time, p - p.m. time)
;	m - minutes
;	s - seconds
;	a - attributes
;	e - file extension
;	* - skip until first space or end of line

;Example:
;	The part of JAR output log:
;	 346) install\'5cf_0286
;	       3656 A.... Win-32  Solid    1-1   2002-07-11 13:36:26 2002-12-09 20:41:20
;	                            26                               2002-12-09 00:00:00
;	 347) install\'5cf_0287
;	      11323 A.... Win-32  Solid    1-1   2002-07-11 13:36:26 2002-12-09 20:41:20
;	                            26                               2002-12-09 00:00:00
;	 and corresponding format patterns:
;	 Format0="* nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"
;	 Format1="zzzzzzzzzz aaaaa                        yyyy tt dd hh mm ss"
;	 Format2=" "
	   

_TOPIC(Command definition format, IDC_HLP_COMMAND_FORMAT)
_PAR Command is string that contains variables. Those variables has the "%"-sign before 
them and will be substituted during command call. 
{ _F_COURIER 
_P The list of command variables:
_P 
_P   %P - long name of archiving utility (as it is in "Archiver" key)
_P   %p - short name of archiving utility (as it is in "Archiver" key)
_P   %A - long name of archive file
_P   %a - short name of archive file
_P   %L - Filelist name. Filelist is the file containing names of files 
_P        to be processed by the external archiver. File names is long
_P   %l - Filelist with short file names.
_P   %F - The name of a single file to process. The archiver will be
_P        executed several times until all file names are exhausted.
_P        This variable should be used only if the destination archiver
_P        does not support filelists on the command line.
_P   %E<errorlevel> - maximum acceptable command errorlevel.
_P        For example, %E2 indicates that errorlevels 0, 1 and 2
_P        are acceptable. This variable may be specified in any place
_P        of command. If it is absent, only errorlevel 0 is considered
_P        as successful.
_P   %O - by default, multiarc convert archiver output from OEM encoding to ANSI.
_P        Applying it skip encoding.
_P 
_P   %R - Target subdirectory IN archive
_P 
_P   \{\-\'7d - if some variable is enclosed in braces - it'll be added only if
_P        this variable will contain something non-empty. See MsCAB addon
_P        for example using. WARNING - Now works only with %R variable. 
_P   
_P   %S - Depends on modes, set in configuration dialog, MultiArc will ask 
_P        user about additional command-line parameters should be passed 
_P        in-place of %S
_P 
_P   %C - Do not hide console window during running external archiver utilities.
_P        The console settings has more configuration options - see configure dialog.
_P 
_P 
_P   Variable modifiers Q, q, W, P, A can be used to change file names 
_P   format details:
_P 
_P   Q - quote names with spaces;
_P   q - quote all names;
_P   W - use name only, without path;
_P   P - use path only, without name;
_P   A - use ANSI encoding.
_P 
_P   These modifiers may be specified immediately after variables without 
_P   spaces.
} //_F_COURIER 

_P See the addons for real examples of commands.

_P _BOLD(Note:)
_P  If archiver utility located in path with non English chars, and you see message like this: 
_P"Executing command 'C:\\Documents and Settings\\ a(r)\\ ?(r)c?(c) aa(r)"\\7za.exe -r0 l D:\\same path\\7zSfx.7z' returned errorlevel -1. Possibly an error occurred. Archive listing wasn't retrieved."

_P or like this: 
_P "Executed command 'C:\\Documents and Settings\\ a(r)\\ ?(r)c?(c) aa(r)"\\7za.exe -r0 l D:\\same path\\7zSfx.7z' returned errorlevel -1, which is higher than configured as normal for this command. Probably error occurred. Check your configuration, please..."

_P Replace in Multiarc.ini on section appropriate archiver parameters 
_BOLD(Extract), _BOLD(ExtractWithPath), _BOLD(Test), _BOLD(Delete), _BOLD(Add) from %P to %PA or %PQA.

